<java.lang.Class: boolean desiredAssertionStatus()>
<java.lang.Class: boolean equals(java.lang.Object)>
<java.lang.Class: boolean isAnnotation()>
<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>
<java.lang.Class: boolean isAnonymousClass()>
<java.lang.Class: boolean isArray()>
<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<java.lang.Class: boolean isEnum()>
<java.lang.Class: boolean isInstance(java.lang.Object)>
<java.lang.Class: boolean isInterface()>
<java.lang.Class: boolean isLocalClass()>
<java.lang.Class: boolean isMemberClass()>
<java.lang.Class: boolean isPrimitive()>
<java.lang.Class: boolean isSynthetic()>
<java.lang.Class: int getModifiers()>
<java.lang.Class: int hashCode()>
<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>
<java.lang.Class: java.lang.Class forName(java.lang.String)>
<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<java.lang.Class: java.lang.Class getClass()>
<java.lang.Class: java.lang.Class getComponentType()>
<java.lang.Class: java.lang.Class getDeclaringClass()>
<java.lang.Class: java.lang.Class getEnclosingClass()>
<java.lang.Class: java.lang.Class getSuperclass()>
<java.lang.Class: java.lang.ClassLoader getClassLoader()>
<java.lang.Class: java.lang.Class[] getClasses()>
<java.lang.Class: java.lang.Class[] getDeclaredClasses()>
<java.lang.Class: java.lang.Class[] getInterfaces()>
<java.lang.Class: java.lang.Object cast(java.lang.Object)>
<java.lang.Class: java.lang.Object newInstance()>
<java.lang.Class: java.lang.Object[] getEnumConstants()>
<java.lang.Class: java.lang.Object[] getSigners()>
<java.lang.Class: java.lang.Package getPackage()>
<java.lang.Class: java.lang.String getCanonicalName()>
<java.lang.Class: java.lang.String getName()>
<java.lang.Class: java.lang.String getSimpleName()>
<java.lang.Class: java.lang.String toString()>
<java.lang.Class: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<java.lang.Class: java.lang.annotation.Annotation[] getAnnotations()>
<java.lang.Class: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Constructor getEnclosingConstructor()>
<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>
<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>
<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>
<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>
<java.lang.Class: java.lang.reflect.Field[] getFields()>
<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Method getEnclosingMethod()>
<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>
<java.lang.Class: java.lang.reflect.Method[] getMethods()>
<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>
<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>
<java.lang.Class: java.net.URL getResource(java.lang.String)>
<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>
<java.lang.Class: void notify()>
<java.lang.Class: void notifyAll()>
<java.lang.Class: void wait()>
<java.lang.Class: void wait(long)>
<java.lang.Class: void wait(long,int)>
<java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.lang.reflect.Constructor: boolean isAccessible()>
<java.lang.reflect.Constructor: boolean isAnnotationPresent(java.lang.Class)>
<java.lang.reflect.Constructor: boolean isSynthetic()>
<java.lang.reflect.Constructor: boolean isVarArgs()>
<java.lang.reflect.Constructor: int getModifiers()>
<java.lang.reflect.Constructor: int hashCode()>
<java.lang.reflect.Constructor: java.lang.Class getClass()>
<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()>
<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>
<java.lang.reflect.Constructor: java.lang.String getName()>
<java.lang.reflect.Constructor: java.lang.String toGenericString()>
<java.lang.reflect.Constructor: java.lang.String toString()>
<java.lang.reflect.Constructor: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<java.lang.reflect.Constructor: java.lang.annotation.Annotation[] getAnnotations()>
<java.lang.reflect.Constructor: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.reflect.Constructor: java.lang.annotation.Annotation[][] getParameterAnnotations()>
<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>
<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>
<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>
<java.lang.reflect.Constructor: void notify()>
<java.lang.reflect.Constructor: void notifyAll()>
<java.lang.reflect.Constructor: void setAccessible(boolean)>
<java.lang.reflect.Constructor: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>
<java.lang.reflect.Constructor: void wait()>
<java.lang.reflect.Constructor: void wait(long)>
<java.lang.reflect.Constructor: void wait(long,int)>
<java.lang.reflect.Field: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>
<java.lang.reflect.Field: boolean isAccessible()>
<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>
<java.lang.reflect.Field: boolean isEnumConstant()>
<java.lang.reflect.Field: boolean isSynthetic()>
<java.lang.reflect.Field: byte getByte(java.lang.Object)>
<java.lang.reflect.Field: char getChar(java.lang.Object)>
<java.lang.reflect.Field: double getDouble(java.lang.Object)>
<java.lang.reflect.Field: float getFloat(java.lang.Object)>
<java.lang.reflect.Field: int getInt(java.lang.Object)>
<java.lang.reflect.Field: int getModifiers()>
<java.lang.reflect.Field: int hashCode()>
<java.lang.reflect.Field: java.lang.Class getClass()>
<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
<java.lang.reflect.Field: java.lang.Class getType()>
<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<java.lang.reflect.Field: java.lang.String getName()>
<java.lang.reflect.Field: java.lang.String toGenericString()>
<java.lang.reflect.Field: java.lang.String toString()>
<java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<java.lang.reflect.Field: java.lang.annotation.Annotation[] getAnnotations()>
<java.lang.reflect.Field: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>
<java.lang.reflect.Field: long getLong(java.lang.Object)>
<java.lang.reflect.Field: short getShort(java.lang.Object)>
<java.lang.reflect.Field: void notify()>
<java.lang.reflect.Field: void notifyAll()>
<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>
<java.lang.reflect.Field: void setAccessible(boolean)>
<java.lang.reflect.Field: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>
<java.lang.reflect.Field: void setByte(java.lang.Object,byte)>
<java.lang.reflect.Field: void setChar(java.lang.Object,char)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>
<java.lang.reflect.Field: void setShort(java.lang.Object,short)>
<java.lang.reflect.Field: void wait()>
<java.lang.reflect.Field: void wait(long)>
<java.lang.reflect.Field: void wait(long,int)>
<java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: boolean isAccessible()>
<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>
<java.lang.reflect.Method: boolean isBridge()>
<java.lang.reflect.Method: boolean isSynthetic()>
<java.lang.reflect.Method: boolean isVarArgs()>
<java.lang.reflect.Method: int getModifiers()>
<java.lang.reflect.Method: int hashCode()>
<java.lang.reflect.Method: java.lang.Class getClass()>
<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.lang.reflect.Method: java.lang.Class getReturnType()>
<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>
<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.lang.reflect.Method: java.lang.Object getDefaultValue()>
<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
<java.lang.reflect.Method: java.lang.String getName()>
<java.lang.reflect.Method: java.lang.String toGenericString()>
<java.lang.reflect.Method: java.lang.String toString()>
<java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<java.lang.reflect.Method: java.lang.annotation.Annotation[] getAnnotations()>
<java.lang.reflect.Method: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.reflect.Method: java.lang.annotation.Annotation[][] getParameterAnnotations()>
<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>
<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>
<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>
<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>
<java.lang.reflect.Method: void notify()>
<java.lang.reflect.Method: void notifyAll()>
<java.lang.reflect.Method: void setAccessible(boolean)>
<java.lang.reflect.Method: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>
<java.lang.reflect.Method: void wait()>
<java.lang.reflect.Method: void wait(long)>
<java.lang.reflect.Method: void wait(long,int)>
